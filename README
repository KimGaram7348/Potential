Potential is a systems programming language designed for high reliability.
It is currently in active development and should be considered HIGHLY
EXPERIMENTAL.

Potential is built on top of the Haskell Platform.
Requires GHC 6.12 and the Haskell Platform.  Download from:
	http://hackage.haskell.org/platform/
Requires packages hint and th-lift, available by cabal install hint th-lift.

Key features:
* Automatically manages pointer aliases, invalidating aliases when changes are
  made to data that have an effect on the underlying type
* Automatically tracks the evolution of machine state as instructions sequence
  together
* Haskell's type inference eliminates the need for type annotations, while ghci
  provides the ability to inspect the types of functions to ensure that the code
  you write has the effect you want
* Easy to extend and modify the language to suit your application's needs

To get a feel, launch ghci -fcontext-stack=160 Tests.TestCode
* Potential functions can be rendered to assembly by the renderFn command
* Inspect types using :t evaluateTypes <function name>

For more information, visit us:
http://potential-lang.org
http://github.com/intoverflow/Potential

